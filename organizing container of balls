#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);
int parse_int(char*);

char* organizingContainers(int container_rows, int container_columns, int** container) {
    int* container_capacity = malloc(container_rows * sizeof(int));
    int* type_count = malloc(container_columns * sizeof(int));

    for (int i = 0; i < container_rows; i++) {
        container_capacity[i] = 0;
        for (int j = 0; j < container_columns; j++) {
            container_capacity[i] += container[i][j];
        }
    }

    for (int j = 0; j < container_columns; j++) {
        type_count[j] = 0;
        for (int i = 0; i < container_rows; i++) {
            type_count[j] += container[i][j];
        }
    }

    // Sort both arrays
    for (int i = 0; i < container_rows - 1; i++) {
        for (int j = i + 1; j < container_rows; j++) {
            if (container_capacity[i] > container_capacity[j]) {
                int temp = container_capacity[i];
                container_capacity[i] = container_capacity[j];
                container_capacity[j] = temp;
            }
            if (type_count[i] > type_count[j]) {
                int temp = type_count[i];
                type_count[i] = type_count[j];
                type_count[j] = temp;
            }
        }
    }

    for (int i = 0; i < container_rows; i++) {
        if (container_capacity[i] != type_count[i]) {
            free(container_capacity);
            free(type_count);
            static char impossible[] = "Impossible";
            return impossible;
        }
    }

    free(container_capacity);
    free(type_count);
    static char possible[] = "Possible";
    return possible;
}

int main() {
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");
    int q = parse_int(ltrim(rtrim(readline())));

    for (int q_itr = 0; q_itr < q; q_itr++) {
        int n = parse_int(ltrim(rtrim(readline())));
        int** container = malloc(n * sizeof(int*));

        for (int i = 0; i < n; i++) {
            container[i] = malloc(n * sizeof(int));
            char** container_item_temp = split_string(rtrim(readline()));

            for (int j = 0; j < n; j++) {
                int container_item = parse_int(container_item_temp[j]);
                container[i][j] = container_item;
            }
        }

        char* result = organizingContainers(n, n, container);
        fprintf(fptr, "%s\n", result);

        // Free container memory
        for (int i = 0; i < n; i++) {
            free(container[i]);
        }
        free(container);
    }

    fclose(fptr);
    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) break;

        data_length += strlen(cursor);
        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') break;

        alloc_length <<= 1;
        data = realloc(data, alloc_length);
        if (!data) break;
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
        data = realloc(data, data_length);
    } else {
        data = realloc(data, data_length + 1);
        data[data_length] = '\0';
    }

    return data;
}

char* ltrim(char* str) {
    if (!str || !*str) return str;
    while (*str != '\0' && isspace(*str)) str++;
    return str;
}

char* rtrim(char* str) {
    if (!str || !*str) return str;
    char* end = str + strlen(str) - 1;
    while (end >= str && isspace(*end)) end--;
    *(end + 1) = '\0';
    return str;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");
    int spaces = 0;

    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);
        splits[spaces - 1] = token;
        token = strtok(NULL, " ");
    }

    return splits;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);
    if (endptr == str || *endptr != '\0') exit(EXIT_FAILURE);
    return value;
}
